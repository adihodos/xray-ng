//
// Copyright (c) 2011, 2012, 2013, 2014, 2015, 2016 Adrian Hodos
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the author nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR THE CONTRIBUTORS BE LIABLE FOR
// ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma once

//
//  All code in this file was automatically generated, DO NOT EDIT !!!

#include <cstdint>
#include <cassert>
#include <iterator>
{type_traits_hdr}

{nsbegin}

struct {enum_name} {
private :
  {enum_name}() = delete;
  ~{enum_name}() = delete;

public :  

  enum class e {enum_underlying_type_spec} {{enum_members_and_values}};

  using underlying_type = {enum_underlying_type};

  static const char *qualified_name(const {enum_name}::e member) noexcept;
  static const char* name(const {enum_name}::e member) noexcept;

  static const char* class_name() noexcept {
    return "{enum_name}::e";
  }

  static underlying_type to_integer(const {enum_name}::e member) noexcept {
    return static_cast<underlying_type>(member);
  }

  static {enum_name}::e from_integer(const underlying_type ival) noexcept {
    return static_cast<{enum_name}::e>(ival);
  }

  using const_iterator = const e*;
  using reverse_const_iterator = std::reverse_iterator<const_iterator>;

  static constexpr size_t size = {enum_length}u;
  static const_iterator cbegin() noexcept { return &_member_entries[0]; }
  static const_iterator cend() noexcept { return &_member_entries[{enum_length}]; }
  static reverse_const_iterator crbegin() noexcept { return reverse_const_iterator(cend());}
  static reverse_const_iterator crend() noexcept { return reverse_const_iterator(cbegin());}
  static bool is_defined(const {enum_name}::e val) noexcept;

private:
  static constexpr const e _member_entries[] = {{enum_members}};
};

{bitwise_and}

{bitwise_or}

{nsend}